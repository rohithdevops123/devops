/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.io.*;

import org.codehaus.plexus.util.*;

boolean result = true;

try
{
    File resources = new File( basedir, "src/main/resources/" );
    if ( !resources.mkdirs() ) {
      System.out.println ( "Failed to create src/main/resources directory." );
      result = false;
    }

    File gitIgnore = new File ( resources, ".gitignore" );


    BufferedWriter writer;
    try {

      writer = new BufferedWriter(new FileWriter(gitIgnore));
      writer.write ("# Test for .gitignore");
      writer.newLine();
    }
    finally {
      try {
        // Close the writer regardless of what happens...
        writer.close();
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

}
catch( IOException e )
{
    e.printStackTrace();
    result = false;
}

try
{
    File resources = new File( basedir, "src/main/resources/dir-with-dot-file/" );

    if ( !resources.mkdirs() ) {
      System.out.println ( "Failed to create dir-with-dot-file folder." );
      result = false;
    }
    File gitIgnore = new File ( resources, ".gitignore" );


    BufferedWriter writer;
    try {

      writer = new BufferedWriter(new FileWriter(gitIgnore));
      writer.write ("# Test for .gitignore");
      writer.newLine();
    }
    finally {
      try {
        // Close the writer regardless of what happens...
        writer.close();
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

}
catch( IOException e )
{
    e.printStackTrace();
    result = false;
}
return result;
